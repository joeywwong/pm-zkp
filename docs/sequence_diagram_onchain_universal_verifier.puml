@startuml
title Programmable Money with Spending Conditionns (On-Chain Verification with Universal Verifier)\nVerfication is performed by a contract separated from ProgrammableMoney.sol, and the verification result can be reused multiple times across different tokens.
actor "Controller (contract owner of PMUniversalVerifier.sol)" as Controller
participant "PMUniversalVerifier.sol (ERC1155 token)" as Money
actor "Money sender (can also be credentials holder)" as Sender
actor "Money receiver (can also be credentials holder)" as receiver
participant "Credentials issuer (issuer website)" as Issuer
participant "UniversalVerifier.sol" as Verifier
participant "Verifier frontend" as VerifierFrontend
' participant "Blockchain" as Blockchain

' --- Configure spending conditions of the money ---
group #lightgreen Spending Conditions Configuration
    opt if related credentials format does not exist
        note right of Controller: Created by Privado's schema builder. Output the schema in both JSON and JSON-LD format. \nSince some functions of Privado needs to fetch the credentials schema, it must be uploaded to publicly accessible storage (e.g. IPFS or Github).
        Controller -> Controller: define and publish credentials format for credentials issuance
    end
    note right of Controller: Spending conditions are generated by a script provided by iden3.\nOutput a proof request in JSON format.
    ' tutorial of proof request creation: https://docs.privado.id/docs/verifier/on-chain-verification/set-zkp-request#approach---b-setting-request-programmatically
    Controller -> Controller: specify spending condition (e.g. age > 18) and its proof request.
    Controller --> Verifier: set proof request
    opt
        Controller --> Money: specify spending conditions and their respective provers's address \n(e.g. money sender, receiver, or third parties) \n(can have different spending conditions for different token ids)
    end
end

group #lightsalmon Credentials Issuance
    opt if holders don't have the related credentials
        ' --- Credential Request and Issuance Phase ---
        note right of Sender: Issued by Privado's Issuer Node API or Issuer Node UI.
        ' https://docs.privado.id/docs/category/issuer-node-api
        ' https://docs.privado.id/docs/category/issuer-node-ui
        ' Demo: https://issuer-demo.privado.id/
        Sender -> Issuer: request credentials
        Issuer --> Sender: request supporting documents for identity attestation
        Sender --> Issuer: provide documents and personal data
        Issuer -> Issuer: perform identity attestation
        alt attestation outcome
            Issuer --> Sender: issue credentials
        else
            Issuer --> Sender: reject credential request
        end
    end
end

' --- Transaction Phase ---
group #lightblue ZKP Verification Before Transaction of PMUniversalVerifier.sol
    note right of Sender: Verifier backend use the proof request JSON to generate a universal link for proof submission and verification. \nHolders receive the proof request by clicking the universal link or scanning the QR code inside the link with Privado's wallet app. \nThe link or QR code handles all these steps:\nShow spending conditions, login to credentials wallet, generate proofs, verification.
    ' tutorial of universal link: https://docs.privado.id/docs/wallet/universal-links/
    note right of Sender: Pros of on-chain verification:\n1. decentralized and immatable verification which ensure ZKP protocol must be performed correctly before transaction\n2. transparent verification on public ledger which allows public audit of verification history and security of ZKP protocol\nCons of on-chain verification:\n1. transaction fee\n2. speed depends on blockchain, may have latency\n3. Verification history on public ledger raise privacy concerns which not suitable for some applications
    alt proof request and ZKP submission (money sender only)
    note right of Sender: Depending on the use case, money sender and/or receiver submit ZKP
        VerifierFrontend -> Sender: navigate user to universal link, show spending conditions and request proof on the website
        Sender --> VerifierFrontend: login to credentials wallet, generate ZKP, submit ZKP
    else proof request and ZKP submission (money receiver only)
        VerifierFrontend -> receiver: navigate user to universal link, show spending conditions and request proof on the website
        receiver --> VerifierFrontend: login to credentials wallet, generate ZKP, submit ZKP
    else proof request and ZKP submission (money sender and receiver)
        VerifierFrontend -> Sender: navigate user to universal link, show spending conditions and request proof on the website
        Sender --> VerifierFrontend: login to credentials wallet, generate ZKP, submit ZKP
        VerifierFrontend -> receiver: navigate user to universal link, show spending conditions and request proof on the website
        receiver --> VerifierFrontend: login to credentials wallet, generate ZKP, submit ZKP
    end

    ' --- Proof Verification and Decision ---
    VerifierFrontend --> Verifier: pass ZKP to backend, backend call the UniversalVerifier.sol's verification function
    Verifier --> Verifier: validate credentials and verify ZKP
    alt verification result (success)
    note right of Money: After ZKP submission, verification results are saved in UniversalVerifier.sol
        Money -> Verifier: get verification result
        Verifier --> Money: send verification result
        Money --> Money: send token
    else verification result (fail)
        Money -> Verifier: get verification result
        Verifier --> Money: send verification result
        Money --> Money: reject transaction
    end
end

@enduml

