@startuml
title Programmable Money with Spending Conditionns (Off-Chain Verification)
participant "Controller (contract owner of ProgrammableMoney.sol)" as Controller
participant "ProgrammableMoney.sol (ERC1155 token)" as Money
participant "Credentials Holder (money sender and/or receiver)" as User
participant "Credentials issuer (issuer website)" as Issuer
participant "Credentials verifier (JS function on backend)" as Verifier
' participant "Blockchain" as Blockchain

' --- Configure spending conditions of the money ---
group #lightgreen Spending Conditions Configuration
    note right of Controller: Spending Conditions generated by Privado's Query Builder.\nOutput a URL and a QR code (for Privado's wallet app) for prover to generate proofs, and a JSON for development.\nThe JSON must be saved as an attribute/variable of ProgrammableMoney.sol
    ' https://tools.privado.id/query-builder
    Controller -> Money: specify spending condition (e.g., age > 18). \ntoken transaction requires sender and/or receiver submitted valid proofs.
    opt if related credentials format does not exist
        note right of Controller: Created by Privado's schema builder. Output JSON and JSON-LD and must be uploaded (e.g. IPFS or Github)
        ' https://tools.privado.id/builder
        Controller -> Issuer: define and publish credentials format
        
    end
end

group #lightsalmon Credentials Issuance
    opt if holders don't have the related credentials
        ' --- Credential Request and Issuance Phase ---
        note right of User: Issued by Privado's Issuer Node API or Issuer Node UI. \nOutput a URL for holder to claim the credentials, \nor issued directly to holders' credentials wallet.
        ' https://docs.privado.id/docs/category/issuer-node-api
        ' https://docs.privado.id/docs/category/issuer-node-ui
        ' Demo: https://issuer-demo.privado.id/
        User -> Issuer: request credentials
        Issuer --> User: request supporting documents for identity attestation
        User --> Issuer: provide documents and personal data
        Issuer -> Issuer: perform identity attestation
        alt attestation outcome
            Issuer --> User: issue credentials
        else
            Issuer --> User: reject credential request
        end
    end
end

' --- Transaction Phase ---
group #lightblue ZKP Verification Before Transaction of ProgrammableMoney.sol, 
    note right of User: Holders click the URL or scan the QR code with Privado's wallet app \n(both generated by Privdo's Query Builder in the Spending Conditions Configuration step)\nThe URL or QR code handles all these steps:\nShow spending conditions, login to credentials wallet, generate proofs, verify
    User -> User: generate ZKP from credentials
    User -> Verifier: submit ZKP

    ' --- Proof Verification and Decision ---
    Verifier -> Verifier: validate credentials and verify ZKP
    alt verification outcome
    note right of Money: Verification outcome is saved to ProgrammableMoney.sol, \ne.g. mapping(address => bool)) private _conditionsMet;
        Verifier --> Money: approve transaction (_conditionsMet[holders_address] = true;)
    else
        Verifier --> Money: reject transaction (_conditionsMet[holders_address] = false;)
    end
end

@enduml
