@startuml
title Programmable Money with Spending Conditionns (On-Chain Verification with Embedded Verifier)\nVerfication is performed inside ProgrammableMoney.sol, and prover needs to generate separate proofs for different instances of ProgrammableMoney.sol.
actor "Controller (contract owner of ProgrammableMoney.sol)" as Controller
participant "ProgrammableMoney.sol (ERC1155 token, inherits EmbeddedZKPVerifier.sol)" as Money
actor "Credentials holder (money sender and/or receiver)" as User
participant "Credentials issuer (issuer website)" as Issuer
participant "Verifier frontend" as VerifierFrontend
' participant "Blockchain" as Blockchain

' --- Configure spending conditions of the money ---
group #lightgreen Spending Conditions Configuration
    opt if related credentials format does not exist
        note right of Controller: Created by Privado's schema builder. Output the schema in both JSON and JSON-LD format. \nSince some functions of Privado needs to fetch the credentials schema, it must be uploaded to publicly accessible storage (e.g. IPFS or Github).
        Controller -> Controller: define and publish credentials format for credentials issuance
    end
    note right of Controller: Spending conditions are generated by Privado's Query Builder.\nOutput a proof request as a URL, a QR code (for Privado's wallet app), and in JSON format.\nOptional: The spending conditions and the proof request can be saved as an attribute or variable of ProgrammableMoney.sol for public audit.
    ' https://tools.privado.id/query-builder
    Controller -> Controller: specify spending condition (e.g. age > 18) and its proof request.
    Controller --> Money: set proof request
    opt
        Controller --> Money: save spending conditions to ProgrammableMoney.sol for public audit
    end
end

group #lightsalmon Credentials Issuance
    opt if holders don't have the related credentials
        ' --- Credential Request and Issuance Phase ---
        note right of User: Issued by Privado's Issuer Node API or Issuer Node UI.
        ' https://docs.privado.id/docs/category/issuer-node-api
        ' https://docs.privado.id/docs/category/issuer-node-ui
        ' Demo: https://issuer-demo.privado.id/
        User -> Issuer: request credentials
        Issuer --> User: request supporting documents for identity attestation
        User --> Issuer: provide documents and personal data
        Issuer -> Issuer: perform identity attestation
        alt attestation outcome
            Issuer --> User: issue credentials
        else
            Issuer --> User: reject credential request
        end
    end
end

' --- Transaction Phase ---
group #lightblue ZKP Verification Before Transaction of ProgrammableMoney.sol, 
    note right of User: Holders receive the proof request by clicking the proof request URL or scanning the QR code with Privado's wallet app \n(both generated by Privdo's Query Builder in the Spending Conditions Configuration step).\nThe URL or QR code handles all these steps:\nShow spending conditions, login to credentials wallet, generate proofs, verify
    note right of User: Pros of on-chain verification:\n1. decentralized and immatable verification which ensure ZKP protocol must be performed correctly before transaction\n2. transparent verification on public ledger which allows public audit of verification history and security of ZKP protocol\nCons of on-chain verification:\n1. transaction fee\n2. speed depends on blockchain, may have latency\n3. Verification history on public ledger raise privacy concerns which not suitable for some applications
    VerifierFrontend -> User: show spending conditions on GUI and request proof
    User --> VerifierFrontend: login to credentials wallet, generate ZKP, submit ZKP

    ' --- Proof Verification and Decision ---
    VerifierFrontend --> Money: pass ZKP to backend, backend call the EmbeddedZKPVerifier.sol's verification function
    Money --> Money: validate credentials and verify ZKP
    alt verification result
    note right of Money: Verification result is saved to ProgrammableMoney.sol, \ne.g. mapping(address => bool)) private _conditionsMet;
        Money --> Money: allow transaction for this holder (_conditionsMet[holders_address] = true;)
    else
        Money --> Money: reject transaction for this holder (_conditionsMet[holders_address] = false;)
    end
end

@enduml

