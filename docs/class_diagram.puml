@startuml
' Domain classes for a Web3 application supporting programmable money transactions

' Represents a record stored off-chain (in your SQLite database)
' for analysis and reporting (e.g., runtime, gas fee, transaction hash)
class DataRecord {
  -recordID : String
  -operationName : String
  -transactionHash : String
  -timestamp : Integer
  -runtime : Float
  -gasFee : Float
  +save() : void
}

' Base class representing a general user
class User {
  - DID : String
  - walletAddress : String
  + getDID() : String
  + setDID(newDID : String) : void
  + getWalletAddress() : String
  + setWalletAddress(newAddress : String) : void
  + loginWithWallet() : void
  + logout() : void
}

' Holder class inherits from User and adds holder-specific behavior
class Holder {
  +showAllCredentials() : List<Credentials>
  +showCredentials() : Credentials
  +requestCredential() : Credentials
  +prove() : ZKP
}

' Issuer class inherits from User and adds issuer-specific behavior
class Issuer {
  +importCredentials() : void
  +issueCredentials() : void
}

' Verifier class inherits from User and adds Verifier-specific behavior
class Verifier {
  -spendingConditions : List<SpendingCondition>
  -conditionsSatisfied : List<Boolean>
  -proofs : List<ZKP>
  +verify(ZKP : ZKP) : Boolean
  +generateProofRequest() : SpendingCondition
}

' Represents a verifiable credential issued to a user
class Credentials {
  -credentialID : String
  -credentialName : String
  -schemaType : String
  -issuanceDate : Date
  -issuerDID : String
  -description : String
  -data : Map<String,String>
  -jsonLD : String
}

' Represents an ERC-1155 token used for programmable money transactions.
class ERC1155Token {
  + balanceOf(address account, uint256 id) : Integer
  + uri(uint256) : String
  + safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) : void
  + setApprovalForAll(address operator, bool approved) : void
  + isApprovedForAll(address account, address operator) : Boolean
  - _setURI(string newuri)
  - _mint(account, id, amount, data) : void
  - _burn(account, id, amount) : void
}

' Represents a zero-knowledge proof generated by a user
class ZKP {
  -proofID : String
  -proofData : String
  -circuitID: String
}

' Represents a programmable money transaction within the system.
class Transaction {
  - transactionId : String
  - status : String
  - timestamp : Integer
  - operationName : String
  - spendingConditions : List<SpendingCondition>
  - conditionsSatisfied : Boolean
  - amount : Float
  + execute() : Boolean
  + setConditionsSatisfied(satisfied : Boolean) : void
  + setStatus(newStatus : String) : void
  + getAmount() : Float
  + setAmount(a : Float) : void
}

' Represents the spending conditions (e.g., age > 18, is_smoker = false). 
' It is actually the verification query of Privado ID. 
' Its workflow is similar to the query builder of Privado ID:
' https://tools.privado.id/query-builder
class SpendingCondition {
  -requestID : String
  -credentialID : String "/* URL to JSON-LD */"
  -allowedIssuerDID : String
  -schemaType : String
  -circuitID : String
  -network : String
  -contractAddress : String
  -attribute : String
  -operator : String
  -skipRevocationCheck : Boolean
  -value : int | bool | string | float
  -spendingConditionJSON : String
  + getRequestID() : String
  + getCredentialID() : String
  + getAllowedIssuerDID() : String
  + getSchemaType() : String
  + getAttribute() : String
  + getOperator() : String
  + isSkipRevocationCheck() : Boolean
  + getValue() : Object "/* Represents int, bool, string, or float */"
  + getSpendingConditionJSON() : String
  + isSatisfiedBy(token: ERC1155Token) : Boolean
}



' Inheritance relationships
User <|-- Holder
User <|-- Issuer
User <|-- Verifier

DataRecord -[hidden]-> User

' Relationships:
' Composition relationship: A Transaction is composed of SpendingConditions.
Issuer "1" --> "0..*" Credentials : "issues"
Transaction "1" --> "1..*" SpendingCondition : "has"
Holder "1" --> "0..*" Credentials : "requests"
Holder "1" --> "0..*" ZKP : "generates"
Transaction "1" --> "1" ERC1155Token : "uses"
Verifier "1" --> "0..*" Transaction : "approved or rejects"
Verifier "1" --> "0..*" ZKP : "verifies"
Issuer "1" --> "0..*" DataRecord : "logs issuance"
Verifier "1" --> "0..*" DataRecord : "logs verification"
Holder "1" --> "0..*" DataRecord : "logs proof generation"
ZKP ..> SpendingCondition : "depends on"
Verifier "1" --> "0..*" SpendingCondition : "generates"

@enduml
